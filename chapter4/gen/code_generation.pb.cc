// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: code_generation.proto

#include "code_generation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace example {
      template <typename>
PROTOBUF_CONSTEXPR TestCodeGenMessage_MapEntry_DoNotUse::TestCodeGenMessage_MapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestCodeGenMessage_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestCodeGenMessage_MapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestCodeGenMessage_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestCodeGenMessage_MapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestCodeGenMessage_MapEntry_DoNotUseDefaultTypeInternal _TestCodeGenMessage_MapEntry_DoNotUse_default_instance_;

inline constexpr TestCodeGenMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        map_{},
        repeated_{},
        string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        duration_{nullptr},
        double__{0},
        float__{0},
        int32_{0},
        int64_{::int64_t{0}},
        uint64_{::uint64_t{0u}},
        uint32_{0u},
        sint32_{0},
        sint64_{::int64_t{0}},
        fixed64_{::uint64_t{0u}},
        fixed32_{0u},
        sfixed32_{0},
        sfixed64_{::int64_t{0}},
        bool__{false},
        TestCodeGenOneof_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TestCodeGenMessage::TestCodeGenMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TestCodeGenMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestCodeGenMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestCodeGenMessageDefaultTypeInternal() {}
  union {
    TestCodeGenMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestCodeGenMessageDefaultTypeInternal _TestCodeGenMessage_default_instance_;
}  // namespace example
static ::_pb::Metadata file_level_metadata_code_5fgeneration_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_code_5fgeneration_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_code_5fgeneration_2eproto = nullptr;
const ::uint32_t TableStruct_code_5fgeneration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage_MapEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage_MapEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage_MapEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage_MapEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.double__),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.float__),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.int32_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.int64_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.uint32_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.uint64_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.sint32_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.sint64_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.fixed32_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.fixed64_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.sfixed32_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.sfixed64_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.bool__),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.string_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.bytes_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.map_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.repeated_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_.TestCodeGenOneof_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::example::TestCodeGenMessage_MapEntry_DoNotUse)},
        {12, 41, -1, sizeof(::example::TestCodeGenMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::example::_TestCodeGenMessage_MapEntry_DoNotUse_default_instance_._instance,
    &::example::_TestCodeGenMessage_default_instance_._instance,
};
const char descriptor_table_protodef_code_5fgeneration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025code_generation.proto\022\007example\032\036google"
    "/protobuf/duration.proto\"\373\003\n\022TestCodeGen"
    "Message\022\016\n\006double\030\001 \001(\001\022\r\n\005float\030\002 \001(\002\022\r"
    "\n\005int32\030\003 \001(\005\022\r\n\005int64\030\004 \001(\003\022\016\n\006uint32\030\005"
    " \001(\r\022\016\n\006uint64\030\006 \001(\004\022\016\n\006sint32\030\007 \001(\021\022\016\n\006"
    "sint64\030\010 \001(\022\022\017\n\007fixed32\030\t \001(\007\022\017\n\007fixed64"
    "\030\n \001(\006\022\020\n\010sfixed32\030\013 \001(\017\022\020\n\010sfixed64\030\014 \001"
    "(\020\022\014\n\004bool\030\r \001(\010\022\016\n\006string\030\016 \001(\t\022\r\n\005byte"
    "s\030\017 \001(\014\0221\n\003map\030\020 \003(\0132$.example.TestCodeG"
    "enMessage.MapEntry\022\020\n\010repeated\030\021 \003(\t\022+\n\007"
    "an_enum\030\022 \001(\0162\030.example.TestCodeGenEnumH"
    "\000\022\026\n\014or_a_boolean\030\023 \001(\010H\000\022+\n\010duration\030\024 "
    "\001(\0132\031.google.protobuf.Duration\032*\n\010MapEnt"
    "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001B\022\n\020Te"
    "stCodeGenOneof*U\n\017TestCodeGenEnum\022\"\n\036TES"
    "T_CODE_GEN_ENUM_UNSPECIFIED\020\000\022\036\n\032TEST_CO"
    "DE_GEN_ENUM_ANOTHER\020\001B\005P\001Z\001.b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_code_5fgeneration_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_code_5fgeneration_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_code_5fgeneration_2eproto = {
    false,
    false,
    676,
    descriptor_table_protodef_code_5fgeneration_2eproto,
    "code_generation.proto",
    &descriptor_table_code_5fgeneration_2eproto_once,
    descriptor_table_code_5fgeneration_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_code_5fgeneration_2eproto::offsets,
    file_level_metadata_code_5fgeneration_2eproto,
    file_level_enum_descriptors_code_5fgeneration_2eproto,
    file_level_service_descriptors_code_5fgeneration_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_code_5fgeneration_2eproto_getter() {
  return &descriptor_table_code_5fgeneration_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_code_5fgeneration_2eproto(&descriptor_table_code_5fgeneration_2eproto);
namespace example {
const ::google::protobuf::EnumDescriptor* TestCodeGenEnum_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_code_5fgeneration_2eproto);
  return file_level_enum_descriptors_code_5fgeneration_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t TestCodeGenEnum_internal_data_[] = {
    131072u, 0u, };
bool TestCodeGenEnum_IsValid(int value) {
  return 0 <= value && value <= 1;
}
// ===================================================================

TestCodeGenMessage_MapEntry_DoNotUse::TestCodeGenMessage_MapEntry_DoNotUse() {}
TestCodeGenMessage_MapEntry_DoNotUse::TestCodeGenMessage_MapEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata TestCodeGenMessage_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_code_5fgeneration_2eproto_getter, &descriptor_table_code_5fgeneration_2eproto_once,
      file_level_metadata_code_5fgeneration_2eproto[0]);
}
// ===================================================================

class TestCodeGenMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestCodeGenMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::example::TestCodeGenMessage, _impl_._oneof_case_);
  static const ::google::protobuf::Duration& duration(const TestCodeGenMessage* msg);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Duration& TestCodeGenMessage::_Internal::duration(const TestCodeGenMessage* msg) {
  return *msg->_impl_.duration_;
}
void TestCodeGenMessage::clear_duration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.duration_ != nullptr) _impl_.duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TestCodeGenMessage::TestCodeGenMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.TestCodeGenMessage)
}
inline PROTOBUF_NDEBUG_INLINE TestCodeGenMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        map_{visibility, arena, from.map_},
        repeated_{visibility, arena, from.repeated_},
        string_(arena, from.string_),
        bytes_(arena, from.bytes_),
        TestCodeGenOneof_{},
        _oneof_case_{from._oneof_case_[0]} {}

TestCodeGenMessage::TestCodeGenMessage(
    ::google::protobuf::Arena* arena,
    const TestCodeGenMessage& from)
    : ::google::protobuf::Message(arena) {
  TestCodeGenMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.duration_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Duration>(arena, *from._impl_.duration_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, double__),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, double__),
           offsetof(Impl_, bool__) -
               offsetof(Impl_, double__) +
               sizeof(Impl_::bool__));
  switch (TestCodeGenOneof_case()) {
    case TESTCODEGENONEOF_NOT_SET:
      break;
      case kAnEnum:
        _impl_.TestCodeGenOneof_.an_enum_ = from._impl_.TestCodeGenOneof_.an_enum_;
        break;
      case kOrABoolean:
        _impl_.TestCodeGenOneof_.or_a_boolean_ = from._impl_.TestCodeGenOneof_.or_a_boolean_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:example.TestCodeGenMessage)
}
inline PROTOBUF_NDEBUG_INLINE TestCodeGenMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        map_{visibility, arena},
        repeated_{visibility, arena},
        string_(arena),
        bytes_(arena),
        TestCodeGenOneof_{},
        _oneof_case_{} {}

inline void TestCodeGenMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_),
           0,
           offsetof(Impl_, bool__) -
               offsetof(Impl_, duration_) +
               sizeof(Impl_::bool__));
}
TestCodeGenMessage::~TestCodeGenMessage() {
  // @@protoc_insertion_point(destructor:example.TestCodeGenMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestCodeGenMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.string_.Destroy();
  _impl_.bytes_.Destroy();
  delete _impl_.duration_;
  if (has_TestCodeGenOneof()) {
    clear_TestCodeGenOneof();
  }
  _impl_.~Impl_();
}

void TestCodeGenMessage::clear_TestCodeGenOneof() {
// @@protoc_insertion_point(one_of_clear_start:example.TestCodeGenMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (TestCodeGenOneof_case()) {
    case kAnEnum: {
      // No need to clear
      break;
    }
    case kOrABoolean: {
      // No need to clear
      break;
    }
    case TESTCODEGENONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TESTCODEGENONEOF_NOT_SET;
}


PROTOBUF_NOINLINE void TestCodeGenMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:example.TestCodeGenMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_.Clear();
  _impl_.repeated_.Clear();
  _impl_.string_.ClearToEmpty();
  _impl_.bytes_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.duration_ != nullptr);
    _impl_.duration_->Clear();
  }
  ::memset(&_impl_.double__, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bool__) -
      reinterpret_cast<char*>(&_impl_.double__)) + sizeof(_impl_.bool__));
  clear_TestCodeGenOneof();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestCodeGenMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 2, 68, 2> TestCodeGenMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_._has_bits_),
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestCodeGenMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double double = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.double__)}},
    // float float = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.float__)}},
    // int32 int32 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestCodeGenMessage, _impl_.int32_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.int32_)}},
    // int64 int64 = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestCodeGenMessage, _impl_.int64_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.int64_)}},
    // uint32 uint32 = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestCodeGenMessage, _impl_.uint32_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.uint32_)}},
    // uint64 uint64 = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestCodeGenMessage, _impl_.uint64_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.uint64_)}},
    // sint32 sint32 = 7;
    {::_pbi::TcParser::FastZ32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.sint32_)}},
    // sint64 sint64 = 8;
    {::_pbi::TcParser::FastZ64S1,
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.sint64_)}},
    // fixed32 fixed32 = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.fixed32_)}},
    // fixed64 fixed64 = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.fixed64_)}},
    // sfixed32 sfixed32 = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.sfixed32_)}},
    // sfixed64 sfixed64 = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.sfixed64_)}},
    // bool bool = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TestCodeGenMessage, _impl_.bool__), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.bool__)}},
    // string string = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.string_)}},
    // bytes bytes = 15;
    {::_pbi::TcParser::FastBS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.bytes_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string repeated = 17;
    {::_pbi::TcParser::FastUR2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.repeated_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Duration duration = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 0, 1, PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.duration_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // double double = 1;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.double__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float float = 2;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.float__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 int32 = 3;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.int32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 int64 = 4;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.int64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // uint32 uint32 = 5;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.uint32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 uint64 = 6;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.uint64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // sint32 sint32 = 7;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.sint32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint64 sint64 = 8;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.sint64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
    // fixed32 fixed32 = 9;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.fixed32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // fixed64 fixed64 = 10;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.fixed64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // sfixed32 sfixed32 = 11;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.sfixed32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSFixed32)},
    // sfixed64 sfixed64 = 12;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.sfixed64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSFixed64)},
    // bool bool = 13;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.bool__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string string = 14;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.string_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes bytes = 15;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.bytes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // map<string, int32> map = 16;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.map_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated string repeated = 17;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.repeated_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .example.TestCodeGenEnum an_enum = 18;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.TestCodeGenOneof_.an_enum_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // bool or_a_boolean = 19;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.TestCodeGenOneof_.or_a_boolean_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // .google.protobuf.Duration duration = 20;
    {PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.duration_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestCodeGenMessage()._impl_.map_)>(
        1, 0, 0, 9,
        5)},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
    "\32\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\3\10\0\0\0\0\0\0"
    "example.TestCodeGenMessage"
    "string"
    "map"
    "repeated"
  }},
};

::uint8_t* TestCodeGenMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.TestCodeGenMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double double = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_double_ = this->_internal_double_();
  ::uint64_t raw_double_;
  memcpy(&raw_double_, &tmp_double_, sizeof(tmp_double_));
  if (raw_double_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_double_(), target);
  }

  // float float = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_float_ = this->_internal_float_();
  ::uint32_t raw_float_;
  memcpy(&raw_float_, &tmp_float_, sizeof(tmp_float_));
  if (raw_float_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_float_(), target);
  }

  // int32 int32 = 3;
  if (this->_internal_int32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_int32(), target);
  }

  // int64 int64 = 4;
  if (this->_internal_int64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_int64(), target);
  }

  // uint32 uint32 = 5;
  if (this->_internal_uint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_uint32(), target);
  }

  // uint64 uint64 = 6;
  if (this->_internal_uint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_uint64(), target);
  }

  // sint32 sint32 = 7;
  if (this->_internal_sint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        7, this->_internal_sint32(), target);
  }

  // sint64 sint64 = 8;
  if (this->_internal_sint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        8, this->_internal_sint64(), target);
  }

  // fixed32 fixed32 = 9;
  if (this->_internal_fixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this->_internal_fixed32(), target);
  }

  // fixed64 fixed64 = 10;
  if (this->_internal_fixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        10, this->_internal_fixed64(), target);
  }

  // sfixed32 sfixed32 = 11;
  if (this->_internal_sfixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(
        11, this->_internal_sfixed32(), target);
  }

  // sfixed64 sfixed64 = 12;
  if (this->_internal_sfixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
        12, this->_internal_sfixed64(), target);
  }

  // bool bool = 13;
  if (this->_internal_bool_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_bool_(), target);
  }

  // string string = 14;
  if (!this->_internal_string().empty()) {
    const std::string& _s = this->_internal_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "example.TestCodeGenMessage.string");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // bytes bytes = 15;
  if (!this->_internal_bytes().empty()) {
    const std::string& _s = this->_internal_bytes();
    target = stream->WriteBytesMaybeAliased(15, _s, target);
  }

  // map<string, int32> map = 16;
  if (!_internal_map().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_map();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            16, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "example.TestCodeGenMessage.map");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            16, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "example.TestCodeGenMessage.map");
      }
    }
  }

  // repeated string repeated = 17;
  for (int i = 0, n = this->_internal_repeated_size(); i < n; ++i) {
    const auto& s = this->_internal_repeated().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "example.TestCodeGenMessage.repeated");
    target = stream->WriteString(17, s, target);
  }

  switch (TestCodeGenOneof_case()) {
    case kAnEnum: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          18, this->_internal_an_enum(), target);
      break;
    }
    case kOrABoolean: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          19, this->_internal_or_a_boolean(), target);
      break;
    }
    default:
      break;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration duration = 20;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.TestCodeGenMessage)
  return target;
}

::size_t TestCodeGenMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.TestCodeGenMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> map = 16;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_map_size());
  for (const auto& entry : _internal_map()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated string repeated = 17;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_repeated().size());
  for (int i = 0, n = _internal_repeated().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_repeated().Get(i));
  }
  // string string = 14;
  if (!this->_internal_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_string());
  }

  // bytes bytes = 15;
  if (!this->_internal_bytes().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_bytes());
  }

  // .google.protobuf.Duration duration = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.duration_);
  }

  // double double = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_double_ = this->_internal_double_();
  ::uint64_t raw_double_;
  memcpy(&raw_double_, &tmp_double_, sizeof(tmp_double_));
  if (raw_double_ != 0) {
    total_size += 9;
  }

  // float float = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_float_ = this->_internal_float_();
  ::uint32_t raw_float_;
  memcpy(&raw_float_, &tmp_float_, sizeof(tmp_float_));
  if (raw_float_ != 0) {
    total_size += 5;
  }

  // int32 int32 = 3;
  if (this->_internal_int32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_int32());
  }

  // int64 int64 = 4;
  if (this->_internal_int64() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_int64());
  }

  // uint64 uint64 = 6;
  if (this->_internal_uint64() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_uint64());
  }

  // uint32 uint32 = 5;
  if (this->_internal_uint32() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_uint32());
  }

  // sint32 sint32 = 7;
  if (this->_internal_sint32() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_sint32());
  }

  // sint64 sint64 = 8;
  if (this->_internal_sint64() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_sint64());
  }

  // fixed64 fixed64 = 10;
  if (this->_internal_fixed64() != 0) {
    total_size += 9;
  }

  // fixed32 fixed32 = 9;
  if (this->_internal_fixed32() != 0) {
    total_size += 5;
  }

  // sfixed32 sfixed32 = 11;
  if (this->_internal_sfixed32() != 0) {
    total_size += 5;
  }

  // sfixed64 sfixed64 = 12;
  if (this->_internal_sfixed64() != 0) {
    total_size += 9;
  }

  // bool bool = 13;
  if (this->_internal_bool_() != 0) {
    total_size += 2;
  }

  switch (TestCodeGenOneof_case()) {
    // .example.TestCodeGenEnum an_enum = 18;
    case kAnEnum: {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_an_enum());
      break;
    }
    // bool or_a_boolean = 19;
    case kOrABoolean: {
      total_size += 3;
      break;
    }
    case TESTCODEGENONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestCodeGenMessage::_class_data_ = {
    TestCodeGenMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TestCodeGenMessage::GetClassData() const {
  return &_class_data_;
}

void TestCodeGenMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestCodeGenMessage*>(&to_msg);
  auto& from = static_cast<const TestCodeGenMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:example.TestCodeGenMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_.MergeFrom(from._impl_.map_);
  _this->_internal_mutable_repeated()->MergeFrom(from._internal_repeated());
  if (!from._internal_string().empty()) {
    _this->_internal_set_string(from._internal_string());
  }
  if (!from._internal_bytes().empty()) {
    _this->_internal_set_bytes(from._internal_bytes());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_duration()->::google::protobuf::Duration::MergeFrom(
        from._internal_duration());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_double_ = from._internal_double_();
  ::uint64_t raw_double_;
  memcpy(&raw_double_, &tmp_double_, sizeof(tmp_double_));
  if (raw_double_ != 0) {
    _this->_internal_set_double_(from._internal_double_());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_float_ = from._internal_float_();
  ::uint32_t raw_float_;
  memcpy(&raw_float_, &tmp_float_, sizeof(tmp_float_));
  if (raw_float_ != 0) {
    _this->_internal_set_float_(from._internal_float_());
  }
  if (from._internal_int32() != 0) {
    _this->_internal_set_int32(from._internal_int32());
  }
  if (from._internal_int64() != 0) {
    _this->_internal_set_int64(from._internal_int64());
  }
  if (from._internal_uint64() != 0) {
    _this->_internal_set_uint64(from._internal_uint64());
  }
  if (from._internal_uint32() != 0) {
    _this->_internal_set_uint32(from._internal_uint32());
  }
  if (from._internal_sint32() != 0) {
    _this->_internal_set_sint32(from._internal_sint32());
  }
  if (from._internal_sint64() != 0) {
    _this->_internal_set_sint64(from._internal_sint64());
  }
  if (from._internal_fixed64() != 0) {
    _this->_internal_set_fixed64(from._internal_fixed64());
  }
  if (from._internal_fixed32() != 0) {
    _this->_internal_set_fixed32(from._internal_fixed32());
  }
  if (from._internal_sfixed32() != 0) {
    _this->_internal_set_sfixed32(from._internal_sfixed32());
  }
  if (from._internal_sfixed64() != 0) {
    _this->_internal_set_sfixed64(from._internal_sfixed64());
  }
  if (from._internal_bool_() != 0) {
    _this->_internal_set_bool_(from._internal_bool_());
  }
  switch (from.TestCodeGenOneof_case()) {
    case kAnEnum: {
      _this->_internal_set_an_enum(from._internal_an_enum());
      break;
    }
    case kOrABoolean: {
      _this->_internal_set_or_a_boolean(from._internal_or_a_boolean());
      break;
    }
    case TESTCODEGENONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestCodeGenMessage::CopyFrom(const TestCodeGenMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.TestCodeGenMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestCodeGenMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TestCodeGenMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TestCodeGenMessage::InternalSwap(TestCodeGenMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.map_.InternalSwap(&other->_impl_.map_);
  _impl_.repeated_.InternalSwap(&other->_impl_.repeated_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string_, &other->_impl_.string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bytes_, &other->_impl_.bytes_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.bool__)
      + sizeof(TestCodeGenMessage::_impl_.bool__)
      - PROTOBUF_FIELD_OFFSET(TestCodeGenMessage, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
  swap(_impl_.TestCodeGenOneof_, other->_impl_.TestCodeGenOneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TestCodeGenMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_code_5fgeneration_2eproto_getter, &descriptor_table_code_5fgeneration_2eproto_once,
      file_level_metadata_code_5fgeneration_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace example
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
